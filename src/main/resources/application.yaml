# SpringBoot Properties: https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html

# TODO: Use Config Server in Kubernetes as it's growing
# https://www.briansdevblog.com/2021/04/spring-cloud-config-server-on-kubernetes-part-1/

spring:
  application:
    name: parkinglots-service

  datasource:
    url: jdbc:postgresql://localhost:5432/supercash?createDatabaseIfNotExist=true
    username: postgres
    password: postgres

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    driverClassName: org.postgres.jdbc.Driver
    generate-ddl: true
    show-sql: true
    hibernate:
#      ddl-auto: create-drop
      ddl-auto: update
    properties:
      hibernate.temp.use_jdbc_metadata_defaults: false
      hibernate.jdbc.lob.non_contextual_creation: true
     # hibernate.format_sql: true

  # Zipkin is the destination environment for the traces and it's disabled in development
  # https://stackoverflow.com/questions/56525260/disable-distributed-tracing-for-development/56529683#56529683
  zipkin:
    enabled: false

  # sleuth is the traces aggregator that's enabled by default, since the gradle dependency is declared with zipkin
  # https://medium.com/@lombos.monika/distributed-tracing-latency-analysis-for-microservices-4ae3b82f3537
  # Read Case 3 for these to propagate the the HTTP Headers
  sleuth:
    baggage:
      remote-fields:
        - "X-Supercash-Tid"
        - "X-Supercash-Uid"
      correlation-fields:
        - "X-Supercash-Tid"
        - "X-Supercash-Uid"

  jackson:
    mapper:
      accept_case_insensitive_enums: true

  devtools:
    livereload:
      port: 35730

# https://reflectoring.io/springboot-logging/#changing-the-color-of-log-output-in-the-console
# https://www.baeldung.com/spring-boot-changing-log-level-at-runtime
logging:
  level:
    org.springframework.core.env: WARN
    org.springframework.jndi: WARN
    org.springframework.web: DEBUG
    # See which config files are loaded in a given environment
    org.springframework.boot.context.config: DEBUG
    # Log level for the app container
    #org.apache.tomcat: DEBUG
    #org.apache.catalina: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
    org.springframework.jdbc.core.JdbcTemplate: DEBUG
    org.springframework.jdbc.core.StatementCreatorUtils: TRACE

    # Supercash
    cash.super_.platform: DEBUG

# here we say that we want to enable accesslog
# https://howtodoinjava.com/spring-boot2/logging/embedded-server-logging-config/
# https://stackoverflow.com/questions/36780680/how-do-you-tell-spring-boot-to-send-the-embedded-tomcats-access-logs-to-stdout/54566643#54566643
server:
  port: 8082
  tomcat:
    accesslog:
      enabled: true
      # /dev/stdout is standard output, so we want tomcat
      # to write to that file descriptor.
      directory: /dev
      prefix: stdout
      buffered: false
      suffix:
      file-date-format:
      # https://tomcat.apache.org/tomcat-8.0-doc/config/valve.html
      # https://howtodoinjava.com/spring-boot2/logging/embedded-server-logging-config/
      # https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html
      pattern: "[ACCESS] %h %t %{org.apache.catalina.AccessLog.RemoteAddr}r http_method=%m http_path=%U http_query=%q http_protocol=%H http_status=%s latency_total=%Dms latency_commit=%Fms response_size=%Bbytes %S %u tid=%{X-Supercash-Tid}i uid=%{X-Supercash-Uid}i x_b3_traceid=%{X-B3-TraceId}o"

# SpringFox Swagger, DOCS at /swagger-ui/#/
# https://stackoverflow.com/questions/39401010/why-is-v2-api-docs-the-default-url-when-using-springfox-and-swagger2/39453151#39453151
springfox:
  documentation:
    swagger:
      v2:
        # Added for Gloo Gatewayhttps://docs.solo.io/gloo-edge/latest/installation/advanced_configuration/fds_mode/
        path: /swagger/docs/v2

# https://docs.spring.io/spring-boot/docs/2.1.11.RELEASE/reference/html/production-ready-monitoring.html
management:
#  server:
#    port: 9090
  # does not work
  #context-path: /admin
  endpoints:
    web:
      # When the server port is used, then the base path is this one
      base-path: /actuator
      exposure:
        include: "*"
        # https://github.com/springdoc/springdoc-openapi/issues/923#issuecomment-735443042

  # Liveness and Readiness probe endpoints only work with this setup
  # https://www.baeldung.com/spring-liveness-readiness-probes#actuator-probes
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true

## https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-feign.html#_feign_logging
#feign.client.config.default.loggerLevel: full

# Supercash platform settings.
cash:
  super:
    platform:
      adaptor:
        # kubernetes readiness probe, reusing the cache and updating it
        # https://www.baeldung.com/spring-boot-kubernetes-self-healing-apps#3-readiness-example
        healthcheck:
          readinessInterval: 1
          readinessTimeUnit: HOURS

      client:
        # Show full HTTP status, body, etc https://www.baeldung.com/java-feign-logging#logging-configuration
        logLevel: FULL

        # Timezone to be used in serialization and deserialization
        timeZone: GMT-3:00

        # Hosts and/or ports to retry (e.g localhost, 8080, localhost:8080)
        retryableDestinationHosts:
          - demonstracao.parkingplus.com.br

        # When we have http outgoing connections that returns HTTP Status 5xx, we will retry 'retryMaxAttempt'
        # before stop. If 0 value is defined, we will retry indefinitely.
        retryMaxAttempt: 5

        # Time, in seconds, we wait until retry an http request sent to any host in 'retryableDestinationHosts',
        # in case we have HTTP Response Status 5xx.
        retryInterval: 3

        # Max time, in seconds, we accept to wait as  the retry interval increases due to exponential backoff
        retryMaxPeriod: 20

        payment:
          baseUrl: http://localhost:8120/v2/payments

        parkingplus:
          # Extracted from the REST API at https://demonstracao.parkingplus.com.br/servicos/v2/api-docs
          baseUrl: https://demonstracao.parkingplus.com.br/servicos

          # Value provided by parking plus
          apiKeyId: 1

          # The ide of the garagem
          parkingLotId: 1

          # Our user ID for the API
          userKey: wps2@18pofe12g5412

          # Duration the results will stay in memory cache to then be evicted
          salesCacheDuration: 5

          # java.util.concurrent.TimeUnit https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/TimeUnit.html
          salesCacheTimeUnit: DAYS

          # Sale ID to apply. Please, use 0 in casa of no sale have to be applied.
          saleId: -1

          # The ticket title of the item in the transaction
          ticketItemTitle: "Estacionamento Maceió Shopping"

          # The service title of the item in the transaction
          serviceFeeItemTitle: "Taxa de Serviço"

          # Our client recipient id in the gateway
          clientRecipientId: re_cklqt3bhu03t00o9tjjlqxibb

          # Our recipient id in the gateway
          ourRecipientId: re_cklqszzdc03ra0p9tf9vgkcgl

          # The percentage our client will receive per each transaction
          clientPercentage: 95

          # The percentage we will receive per each transaction
          ourPercentage: 5

          # Our additional service fee (in Real cents)
          ourFee: 80

          # The string used to filter the sales when load it from WPS
          saleNameStartWith: SUPERCASH

          # Prefix to be used as an payment UDID. The UDID will be defined as ex.
          # {prefix}-{marketplaceId}-{storeId}-{userId}. This field is also used as the "bandeira" for WPS transactions.
          udidPrefix: supercash

          # Time, in minutes, the user can leave the parking lot without paying the ticket
          gracePeriodInMinutes: 20

        orchestrator:
          # if you do not specify port we will use the ${cash.super.platform.configuration.healthCheck.defaultHeathCheckPort}
          apiUrl: http://orchestrator:8501

          # Also used as a default port in any URL used in this application, if not explicit defined in that URL.
          defaultHeathCheckPort: 443

      service:

        parkinglot:
          # Our API Version
          apiVersion: v2